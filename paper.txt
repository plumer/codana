开源软件仓库的挖掘与分析


摘要：


1. 引言

开源软件在近数十年来有了迅猛的发展，在现代的生活中也起着越来越重要的作用，也产生了大量的成功案例。如现在服务器和嵌入式中常使用的操作系统Linux，以及广受欢迎的浏览器Firefox，都是开源软件的代表。随着网络的发展，开源软件社区也不断壮大；而随着开发支撑技术的不断成熟，开源软件也越来越广泛的采用版本控制、缺陷跟踪等工具，使得开源软件的开发和完善的整个周期都被完整的记录下来。对这类数据进行挖掘和分析，可以分析开源软件的一些重要特征及其产生的原因，从而对软件开发起到借鉴和帮助作用。缺陷是软件质量保证最为关注的焦点。

2. 问题提出



3. 工具设计

3.1 数据获取

软件源代码的特征和缺陷数据的模式及演变正是我们关心的重点，而这些数据则来源于开源软件仓库。尤其是那些使用版本控制软件和缺陷跟踪日志的项目十分适合展示其特征及缺陷演进的变化和模式。为了方便工具的多个部分之间进行数据传递，因此将数据获取之后整理成固定的格式并由其他模块使用。

3.1.1 文件信息与文件关联

软件的源代码的组织形式、所形成的模块以及模块之间的相互关系都对一个工程产生缺陷以及缺陷修复的情况具有很大的影响。为了方便获取源代码的相关数据，我们使用understand工具分析源代码的基本数据，例如代码行数、模块依赖关系（函数调用）等。

以Apache Tomcat工程为例，该工程主要由java编写而成。利用understand分析出源代码中每一个java文件所包含的代码行数等代码基本信息，以及每个类之间、包之间的关联信息，并加以整理，生成记录文件。

3.1.2 开发日志与缺陷信息

源代码本身的很多性质影响着软件的质量以及缺陷状况。这些缺陷状况和软件质量的反馈则通过开发者留下的开发日志以及由使用者提交的缺陷记录保存下来，成为研究软件质量的一个着手点。

开发日志通常由subversion, git等版本控制软件记录，在软件开发周期中，开发者增添或修改功能模块之后，为了方便彼此能够同步进度，通常利用简短的描述记录修改的内容和位置。因此开发日志中便记录下缺陷发生和修复的全过程。从版本控制软件中导出软件的开发日志，便可以获取缺陷修复信息和所关联的文件。

开源软件通常会提供类似bugzilla的缺陷跟踪平台，方便使用者提交所遇到的缺陷并跟踪缺陷的解决过程。因此这样的缺陷跟踪平台上通常会记录缺陷的详细信息、严重程度及修复进度。利用脚本从平台上获取缺陷的各类信息，并同开发日志中的修复信息作比较，从而建立起从缺陷信息到所关联文件的关系。

以Apache Tomcat工程为例，其代码仓库使用Subversion进行管理，同时提供了bugzilla平台用于跟踪缺陷信息。因此利用脚本获取和分析缺陷信息，并和开发日志中的信息进行匹配，生成数据记录文件方便后续的综合分析过程。

3.2 数据可视化


4. 更多工作
