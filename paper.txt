开源软件仓库的挖掘与分析


摘要：


1. 引言

开源软件在近数十年来有了迅猛的发展，在现代的生活中也起着越来越重要的作用，也产生了大量的成功案例。
如现在服务器和嵌入式中常使用的操作系统Linux，以及广受欢迎的浏览器Firefox，都是开源软件的代表。
随着网络的发展，开源软件社区也不断壮大；
而随着开发支撑技术的不断成熟，开源软件也越来越广泛的采用版本控制、缺陷跟踪等工具，使得开源软件的开发和完善的整个周期都被完整的记录下来。
对这类数据进行挖掘和分析，可以分析开源软件的一些重要特征及其产生的原因，从而对软件开发起到借鉴和帮助作用。
缺陷是软件质量保证最为关注的焦点。



2. 工具设计

2 数据获取

软件源代码的特征和缺陷数据的模式及演变正是我们关心的重点，而这些数据则来源于开源软件仓库。
尤其是那些使用版本控制软件和缺陷跟踪日志的项目十分适合展示其特征及缺陷演进的变化和模式。
为了方便工具的多个部分之间进行数据传递，因此将数据获取之后整理成固定的格式并由其他模块使用。

2.1 文件信息与文件关联

软件的源代码的组织形式、所形成的模块以及模块之间的相互关系
都对一个工程产生缺陷以及缺陷修复的情况具有很大的影响。
为了方便获取源代码的相关数据，我们使用understand工具分析源代码的基本数据，
例如代码行数、模块依赖关系（函数调用）等。

以Apache Tomcat工程为例，该工程主要由java编写而成。
利用understand分析出源代码中每一个java文件所包含的代码行数等代码基本信息，
以及每个类之间、包之间的关联信息，并加以整理，生成记录文件。

2.2 开发日志与缺陷信息

源代码本身的很多性质影响着软件的质量以及缺陷状况。
这些缺陷状况和软件质量的反馈则通过开发者留下的开发日志以及由使用者提交的缺陷记录保存下来，
成为研究软件质量的一个着手点。

开发日志通常由subversion, git等版本控制软件记录，
在软件开发周期中，开发者增添或修改功能模块之后，
为了方便彼此能够同步进度，通常利用简短的描述记录修改的内容和位置。
因此开发日志中便记录下缺陷发生和修复的全过程。
从版本控制软件中导出软件的开发日志，便可以获取缺陷修复信息和所关联的文件。

开源软件通常会提供类似bugzilla的缺陷跟踪平台，
方便使用者提交所遇到的缺陷并跟踪缺陷的解决过程。
因此这样的缺陷跟踪平台上通常会记录缺陷的详细信息、严重程度及修复进度。
利用脚本从平台上获取缺陷的各类信息，并同开发日志中的修复信息作比较，
从而建立起从缺陷信息到所关联文件的关系。

以Apache Tomcat工程为例，其代码仓库使用Subversion进行管理，
同时提供了bugzilla平台用于跟踪缺陷信息。
因此利用脚本获取和分析缺陷信息，并和开发日志中的信息进行匹配，
生成数据记录文件方便后续的综合分析过程。

3 数据可视化

3.1 建模

数据经过提取分析之后，需要用一个方便查看的方式进行演示。
在文件信息和文件关联方面，由于文件之间的关联的方式比较简单，
即文件之间只有二元关系，所以使用图对工程进行建模是最直观的方式。
每个文件抽象成一个点，带有文件本身的附属属性。
代码行数、从缺陷报告中所得到的缺陷个数都属于文件本身的附属属性。
文件与文件之间的依赖关系可以抽象成两点之间的边。

有了点和边之后，工程文件本身就可以抽象成一张图。
这个图本身就是文件之间构建的网络。
我们将图用图形化的方式画出来，这样就可以直观地看到文件与文件之间的关联。
图中度较大的点明显比较重要，而度较小的点稍次之。
在网络关系较复杂的区域，文件之间可能会有互相的依赖。
总之，有了这样的可视化的图之后，就可以对工程有一个直观的理解。

3.2 简化

当然，一个工程中的文件有很多很多，Tomcat工程的文件就有上千个，文件之间的依赖关系有上万条。
对于规模更大的工程，这张图明显会更大，顶点更多，边也更多。
如果全部显示，效果会很不好，看起来非常凌乱。
通常来说，代码文件具有局部性，即与一个代码文件有关系的其他文件必定会集中在该文件附近的目录中，
路径相隔较远的两个文件相关联的可能性很小。
由此，我们的工具使用了分割的策略，将一个大工程分解成数个字模块分别分析。

用Java编写的软件一般都由多个Package组成，
各个Package之间独立性较高，所以以Package为单位来分割工程是一个可行度高的想法。
在区分出各个模块之后，对各个模块进行分析，得到文件和文件关系，即一张规模较小的图。
在这张较小的图中我们进行了进一步的简化，在可视化的时候忽略度极低的点，
让图看起来更加清晰。

3.3 显示和附加效果

由于图形在显示器上毕竟空间有限，我们加入了交互的效果。
鼠标点击某个文件所示的顶点时，可以显示该文件的附属属性。
历史的缺陷信息、修改次数等信息都可以交互式地展现。

我们使用了动画效果来演示软件版本更新过程中的变化。
软件每更新一次，每发布一个新的版本，相应的就会有文件的变化。
如果改动较小，那么可能是文件大小的变化;
如果改动较大，那么可能有新增的文件或者删除的文件；
可能会有文件依赖关系的变化。
这些变化都可以用图形的动态效果来演示。

4. 更多工作

对更多种类的工程进行支持：
不仅是Java工程，C、C++等常用的软件开发用语言也需要支持，
而且不同语言的特性也不相同。